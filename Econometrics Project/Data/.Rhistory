filter(is.na(precip))
length(unique(fipsna$fips))
head(fipsna$fips)
summary(fipsna$fips)
list(fipsna$fips)
list(cleanprecipdata$fips)
list(unique(fipsna$fips))
list(unique(cleanprecipdata$fips))
View(precipdata)
View(master_data)
View(precipdata)
View(cleanprecipdata)
filter(is.na(tot)
naprecip = cleanprecipdata|>
naprecip = cleanprecipdata|>
library(tidyverse)
library(tidyverse)
naprecip = cleanprecipdata|>
sum(is.na(master_data$precip))
naprecip = is.na(cleanprecipdata$tot0)
naprecip = is.na(cleanprecipdata$tot)
naprecip = cleanprecipdata|>
filter(is.na(tot))
View(master_data)
View(bigdataset)
bigdataset|>
mutate(changemigration = net_migration[i+1]/net_migration)
i = seq(length = 23, by = 1)
bigdataset|>
mutate(changemigration = net_migration[i+1]/net_migration)
bigdataset|>
group_by(year)
bigdataset|>
group_by(year)|>
mutate(changemigration = net_migration[i+1]/net_migration)
bigdataset|>
group_by(year)|>
mutate(changemigration = net_migration[i-1]/net_migration)
i = seq(length = 36684, by = 1)
bigdataset|>
group_by(year)|>
mutate(changemigration = net_migration[i+1]/net_migration)
bigdataset|>
mutate(changemigration = net_migration[i+1]/net_migration)
bigdataset|>
mutate(changemigration = net_migration[i+1]/net_migration)|>
select(changemigration, net_migration)
bigdataset|>
mutate(changemigration = net_migration[i-1]/net_migration)|>
select(changemigration, net_migration)
bigdataset|>
mutate(changemigration = net_migration[i+1]/net_migration)|>
select(changemigration, net_migration)
i = seq(length = 23, by = 1)
bigdataset|>
group_by(fips)|>
mutate(nextyearmigration = net_migration[i+1]/net_migration)|>
select(nextyearmigration, net_migration)
bigdataset|>
arrange(fips, year)|>
group_by(fips)|>
mutate(changemigration2010 = net_migration/lag(net_migration))|>
ungroup()|>
mutate(changemigration = ifelse(year == 2010,
changemigration2010,
changemigration))|>
select(-changemigration2010)
bigdataset|>
arrange(fips, year)|>
group_by(fips)|>
mutate(changemigration2010 = net_migration/lag(net_migration))|>
ungroup()|>
mutate(changemigration = ifelse(year == 2010,
changemigration2010))|>
select(-changemigration2010)
bigdataset|>
arrange(fips, year)|>
group_by(fips)|>
mutate(changemigration2010 = net_migration/lag(net_migration))|>
ungroup()|>
mutate(changemigration = ifelse(year == 2010,
changemigration2010,
changemigration))|>
select(-changemigration2010)
bigdataset|>
arrange(fips, year)|>
group_by(fips)|>
mutate(changemigration2010 = net_migration/lag(net_migration))|>
ungroup()|>
mutate("changemigration" = ifelse(year == 2010,
changemigration2010,
"changemigration"))|>
select(-changemigration2010)
bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)
bigdataset$net_migration = as.numeric(bigdataset$net_migration)
bigdataset$pop_estimates = as.numeric(bigdataset$pop_estimates)
bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)
bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
summary(mean_migration_over_population = mean(migrationpop)
median_migration_over_population = median(migrationpop)
bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
summary(mean_migration_over_population = mean(migrationpop),
median_migration_over_population = median(migrationpop),
standard_deviation_migration_over_population = sd(migrationpop)
)
bigdataset|>
bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
select(migrationpop, diff)|>
summary()
bigdataset|>
bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
select(migrationpop, diff)|>
summary()
bigdataset|>
bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
select(migrationpop, diff)|>
summary(migrationpop, diff)
bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
select(migrationpop, diff)|>
summary(bigdataset)
bigdataset = bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
select(migrationpop, diff)|>
summary(bigdataset)|>
```
bigdataset = bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
select(migrationpop, diff)|>
summary(bigdataset)
read.csv("bigdataset")
read.csv("bigdataset.csv")
bigdataset = read.csv("bigdataset")
bigdataset$net_migration = as.numeric(bigdataset$net_migration)
bigdataset$pop_estimates = as.numeric(bigdataset$pop_estimates)
usedbigdataset = bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
select(migrationpop, diff)|>
summary(bigdataset)
bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
select(migrationpop, diff)|>
summary(bigdataset)
usedbigdat = bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)
usedbigdat|>
select(migrationpop, diff)|>
summary(bigdataset)
plot(usedbigdat$totalprecipitation,usedbigdat$migrationpop)
usedbigdat = bigdataset|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)
View(usedbigdat)
plot(usedbigdat$diff,usedbigdat$migrationpop)
load("C:/Users/malon/Downloads/precipitation_diff.Rda")
View(precipitation_data)
usedbigdat = merge(bigdataset,preciptation_data)
View(precipitation_data)
View(precipdata)
View(precipitation_data)
precip_diff = precipitation_data[,5]
cbind(master_data, precip_diff)
merge(master_data, precipitation_data)
usedbigdat = merge(master_data, precipitation_data)
usedbigdat|>
arrange(fips, year)|>
mutate(migrationpop = net_migration/pop_estimates)|>
select(migrationpop, diff)|>
summary(bigdataset)
View(usedbigdat)
View(precipitation_data)
usedbigdat|>
arrange(year, fips)|>
rename(precipiation_difference = difference)
usedbigdat|>
arrange(year, fips)|>
rename(precipiation_difference = difference)|>
mutate(migrationpopulation = net_migration/pop_estimates)|>
select(migrationpopulation, precipiation_difference)|>
summary(usedbigdat)
usedbigdat$pop_estimates = as.numeric(usedbigdat$pop_estimates)
usedbigdat$net_migration = as.numeric(usedbigdat$net_migration)
usedbigdat|>
arrange(year, fips)|>
rename(precipiation_difference = difference)|>
mutate(migrationpopulation = net_migration/pop_estimates)|>
select(migrationpopulation, precipiation_difference)|>
summary(usedbigdat)
plotdat = usedbigdat|>
arrange(year, fips)|>
rename(precipiation_difference = difference)|>
mutate(migrationpopulation = net_migration/pop_estimates)|>
select(migrationpopulation, precipiation_difference)
summary(plotdat)
plot(plotdat$precipitation_difference,usedbigdat$migrationpopulation)
plot(plotdat$precipiation_difference,plotdat$migrationpopulation)
?plot
plot(plotdat$precipiation_difference,plotdat$migrationpopulation,xlab = "Difference in Precipitation per county over the previous year", ylab = "Net migration per population in county")
plot(plotdat$precipiation_difference,plotdat$migrationpopulation,ylim = -0.75,xlab = "Difference in Precipitation per county over the previous year", ylab = "Net migration per population in county")
plot(plotdat$precipiation_difference,plotdat$migrationpopulation,ylim > -0.75,xlab = "Difference in Precipitation per county over the previous year", ylab = "Net migration per population in county")
plot(plotdat$precipiation_difference,plotdat$migrationpopulation,ylim = -0.75,xlab = "Difference in Precipitation per county over the previous year", ylab = "Net migration per population in county")
plotdat = plotdat|>
filter(migrationpopulation > -.75)
plot(plotdat$precipiation_difference,plotdat$migrationpopulation,xlab = "Difference in Precipitation per county over the previous year", ylab = "Net migration per population in county")
plot(plotdat$precipiation_difference,plotdat$migrationpopulation,xlab = "Difference in Precipitation", ylab = "Net migration as a percent of population")
plot(plotdat$precipiation_difference,plotdat$migrationpopulation,xlab = "Difference in Precipitation", ylab = "Net migration as a Percent of Population")
plot(plotdat$precipiation_difference,plotdat$migrationpopulation,xlab = "Difference in Precipitation", ylab = "Net Migration as a Percent of Population")
summary(plotdat)
install.packages("haven")
install.packages("haven")
library(haven)
write_dta(your_data, "your_data.dta")
write_dta(summarystatdat, "summarystatdat.dta")
write_dta(plotdat, "summarystatdat.dta")
plot(plotdat$precipiation_difference,plotdat$migrationpopulation,xlab = "Difference in Precipitation", ylab = "Net Migration as a Percent of Population")
plotdat = usedbigdat|>
arrange(year, fips)|>
rename(precipiation_difference = difference)|>
mutate(migrationpopulation = net_migration/pop_estimates)
plot(plotdat$precipiation_difference,plotdat$net_migration_rate,xlab = "Difference in Precipitation", ylab = "Net Migration as a Percent of Population")
View(plotdat)
bigdataset$net_migration = as.numeric(bigdataset$net_migration)
bigdataset$pop_estimates = as.numeric(bigdataset$pop_estimates)
precip_diff = precipitation_data[,5]
usedbigdat = merge(master_data, precipitation_data)
usedbigdat = merge(master_data, precipitation_data)
usedbigdat$pop_estimates = as.numeric(usedbigdat$pop_estimates)
usedbigdat$net_migration = as.numeric(usedbigdat$net_migration)
plotdat = usedbigdat|>
arrange(year, fips)|>
rename(precipiation_difference = difference)|>
mutate(migrationpopulation = net_migration/pop_estimates)
save(plotdat, file = "summarydata")
read.csv("usa_00008.csv.gz")
read.csv("usa_00008.csv.gz")
housing = read.csv("usa_00008.csv.gz")
housing = read.csv("usa_00008.csv.gz")
usa_00008.csv <- read.csv("C:/Users/malon/Downloads/usa_00008.csv.gz")
View(usa_00008.csv)
View(usa_00008.csv)
library(tidyverse)
usa_00008.csv|>
filter(RENT != 0)
dat = usa_00008.csv|>
filter(RENT != 0)
dat
head(dat$CITY)
dat = usa_00008.csv|>
filter(VALUEH != 9999999)
dat
puzzle = read_csv("https://bit.ly/3B4BraF")
puzzle
View(puzzle)
library(tidyverse)
puzzle|>
mutate(y-x)
View(puzzle)
puzzle = puzzle|>
mutate(y-x)
View(puzzle)
puzzle = puzzle|>
log(y)
plot(x,y)
plot(puzzle$x, puzzle$y)
#run given code
if (!require("tidymodels")) install.packages("tidymodels")
library(tidymodels)
data(ames)
houses = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area
) %>%
select(id, SalePrice, age, area, Lot_Area, TotRms_AbvGrd, Neighborhood)
#install some additional packages which might help
library(tidyverse)
library(stringr)
library(Metrics)
#plot the datasets for initial analysis
hist(houses$SalePrice)
hist(houses$age)
hist(houses$area)
hist(houses$Lot_Area)
hist(houses$TotRms_AbvGrd)
plot(houses$SalePrice, houses$age)
plot(houses$SalePrice, houses$area)
plot(houses$SalePrice, houses$age*houses$area)
plot(houses$SalePrice, houses$agesquare)
plot(houses$SalePrice, houses$areasquare)
#create new variables which record the age squared and the area squared of houses.
houses = houses|>
mutate(
agesquare = age^2,
areasquare = area^2,
logsale = log(Lot_Area),
logarea = log(Lot_Area)
)
#run the specified regression, and records it in a data list
ols1 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare)
#displays the regression in a summary
summary(ols1)
#create a dataset out of the regression
ols1dat = augment(ols1)
#clean the created dataset so it can be merged with the houses dataset
colnames(ols1dat) = gsub(pattern = "houses", replacement = "", x = colnames(ols1dat))
colnames(ols1dat) = gsub(pattern = "\\$", replacement = "", x = colnames(ols1dat))
#merge the regression dataset with the houses dataset
houses2 = left_join(houses, ols1dat)
#calculate RMSE using the Metrics package
baseroot = rmse(houses2$SalePrice, houses2$.fitted)
baseroot
#Root mean square error of the sale price is 44.83035.
#lets make a function which automates the analysis of regressions, so I can do it faster
cleanreg = function(x){
xdat = augment(x)
colnames(xdat) = gsub(pattern = "houses", replacement = "", x = colnames(xdat))
colnames(xdat) = gsub(pattern = "\\$", replacement = "", x = colnames(xdat))
housemerge = left_join(houses, xdat)
rootmean = rmse(housemerge$SalePrice, housemerge$.fitted)
rootdiff = rootmean - baseroot
roottest = ifelse(rootdiff < 0, "This one has less error than the base", "This one has more error, try again")
rootlist = c(rootmean,rootdiff, roottest)
return(rootlist)
}
#hypothesis: log transforming price will reduce error
ols5 = lm(houses$logsale~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare)
#hypothesis: error is less if the squared terms are removed.
ols2 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area)
cleanreg(ols2)
#nope
#hypothesis: error is less if lot area is used instead of house area
ols3 = lm(houses$SalePrice~houses$age + houses$Lot_Area + houses$age*houses$Lot_Area + houses$agesquare + poly(houses$Lot_Area))
cleanreg(ols3)
#nope
#hypothesis: error is less if total rooms is included
ols4 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare + houses$TotRms_AbvGrd)
cleanreg(ols4)
#this one works
#hypothesis: log transforming price will reduce error
ols5 = lm(houses$logsale~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare)
cleanreg(ols5)
cleanreg(ols5)
#create new variables which record the age squared and the area squared of houses.
houses = houses|>
mutate(
agesquare = age^2,
areasquare = area^2,
logsale = log(Lot_Area),
logarea = log(Lot_Area),
logareasquare = logarea^2
)
#hypothesis: log transforming price and area will reduce error
ols6 = lm(houses$logsale~houses$age + houses$logarea + houses$age*houses$logarea + houses$agesquare + houses$logareasquare)
cleanreg(ols6)
#lets make a function which automates the analysis of regressions, so I can do it faster
cleanreg = function(x){
xdat = augment(x)
colnames(xdat) = gsub(pattern = "houses", replacement = "", x = colnames(xdat))
colnames(xdat) = gsub(pattern = "\\$", replacement = "", x = colnames(xdat))
housemerge = merge(houses, xdat)
rootmean = rmse(housemerge$SalePrice, housemerge$.fitted)
rootdiff = rootmean - baseroot
roottest = ifelse(rootdiff < 0, "This one has less error than the base", "This one has more error, try again")
rootlist = c(rootmean,rootdiff, roottest)
return(rootlist)
}
cleanreg(ols2)
#hypothesis: error is less if the squared terms are removed.
ols2 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area)
cleanreg(ols2)
#nope
#hypothesis: error is less if lot area is used instead of house area
ols3 = lm(houses$SalePrice~houses$age + houses$Lot_Area + houses$age*houses$Lot_Area + houses$agesquare + poly(houses$Lot_Area))
cleanreg(ols3)
#nope
#hypothesis: error is less if total rooms is included
ols4 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare + houses$TotRms_AbvGrd)
cleanreg(ols4)
#this one works
#hypothesis: log transforming price will reduce error
ols5 = lm(houses$logsale~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare)
cleanreg(ols5)
#SIGNIFICANTLY more error
#hypothesis: log transforming price and area will reduce error
ols6 = lm(houses$logsale~houses$age + houses$logarea + houses$age*houses$logarea + houses$agesquare + houses$logareasquare)
cleanreg(ols6)
#also significantly more error
#lets modify the function so that it only throws up the RMSE and adds them to a vector
rmsereg = function(x){
xdat = augment(x)
colnames(xdat) = gsub(pattern = "houses", replacement = "", x = colnames(xdat))
colnames(xdat) = gsub(pattern = "\\$", replacement = "", x = colnames(xdat))
housemerge = merge(houses, xdat)
rootmean = rmse(housemerge$SalePrice, housemerge$.fitted)
return(rootmean)
}
#lets make a regression with all variables and see what happens
ols7 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare + houses$Lot_Area + houses$TotRms_AbvGrd + houses$Neighborhood)
#this one only has the lot area
ols8 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare + houses$Lot_Area)
#this one only has total rooms above ground
ols9 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare + houses$TotRms_AbvGrd)
#this one only has neighborhood
ols10 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare + houses$Neighborhood)
#this one has lot area and total rooms
ols11 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare + houses$Lot_Area + houses$TotRms_AbvGrd)
#this one has lot area and neighborhood
ols12 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare + houses$Lot_Area + houses$Neighborhood)
#this one has total rooms and neighborhood
ols13 = lm(houses$SalePrice~houses$age + houses$area + houses$age*houses$area + houses$agesquare + houses$areasquare + houses$TotRms_AbvGrd + houses$Neighborhood)
#this creates a vector which contains all the RMSE values of each regression done so far
rmsedat = c()
rmsedat[1] = rmsereg(ols1)
rmsedat[2] = rmsereg(ols2)
rmsedat[3] = rmsereg(ols3)
rmsedat[4] = rmsereg(ols4)
rmsedat[5] = rmsereg(ols5)
rmsedat[6] = rmsereg(ols6)
rmsedat[7] = rmsereg(ols7)
rmsedat[8] = rmsereg(ols8)
rmsedat[9] = rmsereg(ols9)
rmsedat[10] =rmsereg(ols10)
rmsedat[11] =rmsereg(ols11)
rmsedat[12] =rmsereg(ols12)
rmsedat[13] =rmsereg(ols13)
#this creates a vector which acts as a label for the RMSE vector, so i can tell which value belongs to which regression at a glance.
whichreg = c(seq(from = 1, to = 13))
#this shows summary statistics of the RMSE vector, but most importantly, it has the minimum value.
summary(rmsedat)
#the minimum is 37.52 in the regressions done
#bind the RMSE vector and the label vector together
cbind(rmsedat, whichreg)
#the regression which has the least RMSE of the regressions done is regression number 5, which has all variables added available in the dataset added to the regression.
set.seed(12345)
data_split   = initial_split(houses, prop = 0.75)
houses_train = training(data_split)
houses_test  = testing(data_split)
cleantestreg = function(x){
xdat = augment(x)
colnames(xdat) = gsub(pattern = "houses_test", replacement = "", x = colnames(xdat))
colnames(xdat) = gsub(pattern = "\\$", replacement = "", x = colnames(xdat))
housemerge = merge(houses_test, xdat)
rootmean = rmse(housemerge$SalePrice, housemerge$.fitted)
rootdiff = rootmean - baseroot
roottest = ifelse(rootdiff < 0, "This one has less error than the master set", "This one has more error than the master set")
rootlist = c(rootmean,rootdiff, roottest)
return(rootlist)
}
#This one is the base regression
trainols1 = lm(houses_test$SalePrice~houses_test$age + houses_test$area + houses_test$age*houses_test$area + houses_test$agesquare + houses_test$areasquare)
#this one is regression 4 above, which had a smaller RMSE than base
trainols2 = lm(houses_test$SalePrice~houses_test$age + houses_test$area + houses_test$age*houses_test$area + houses_test$agesquare + houses_test$areasquare + houses_test$TotRms_AbvGrd)
#this one is regression 7 above
trainols3 = lm(houses_test$SalePrice~houses_test$age + houses_test$area + houses_test$age*houses_test$area + houses_test$agesquare + houses_test$areasquare + houses_test$Lot_Area + houses_test$TotRms_AbvGrd + houses_test$Neighborhood)
cleantestreg(trainols1)
cleantestreg(trainols2)
cleantestreg(trainols3)
library(stargazer)
library(tidyverse)
library(zoo)
library(future)
library(future.apply)
library(tictoc)
library(did)
library(vtable)
setwd("C:/Users/malon/OneDrive/Documents/GitHub/econometrics-project-B/Econometrics Project/Data")
incomeandmaster2 = read_csv("incomeandmaster2.csv")
#create variables which record LFPS, migration per 10000 pops, a control variable for population
incomeandmaster3 = incomeandmaster2|>
mutate(pop10k = pop_estimates / 10000,
lf = unemployed + employed,
lfpr = lf / pop_estimates,
migrate10k = net_migration / pop10k)|>
group_by(fips)|>
mutate(lastyeardrought = lag(droughtseverity, n = 1))
View(incomeandmaster3)
incomeandmaster3$droughtseverity = as.factor(incomeandmaster3$droughtseverity)
incomeandmaster3$lastyeardrought = as.factor(incomeandmaster3$lastyeardrought)
incomeandmaster3$time = as.factor(incomeandmaster3$time)
fols13 = lm(migrate10k ~ lastyeardrought + lastyearprecip + lastyeardrought * lastyearprecip + unemploy_rate + lfpr + pop10k + incomeperpop + fips + time, data = incomeandmaster3)
stargazer(fols13, type = "html", omit = c("time", "fips"), out = "finalreg3.html")
#save the new dataset, makes sure it can be re-read
write_csv(incomeandmaster3, file = "incomeandmaster2.csv")
#save the new dataset, makes sure it can be re-read
write_csv(incomeandmaster3, file = "incomeandmaster2.csv")
#save the new dataset, makes sure it can be re-read
write_csv(incomeandmaster3, file = "incomeandmaster3.csv")
write_csv(incomeandmaster3, file = "finalincomemaster.csv)
write_csv(incomeandmaster3, file = "finalincomemaster.csv")
write_csv(incomeandmaster3, file = "finalincomemaster.csv")
